{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\quiz maker client\\\\src\\\\pages\\\\public\\\\start_quiz\\\\StartQuiz.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Box, Button, Checkbox, Container, Divider, Flex, Heading, HStack, IconButton, SimpleGrid, Text, Tooltip, VStack, AlertDialog, AlertDialogBody, AlertDialogFooter, AlertDialogHeader, AlertDialogContent, AlertDialogOverlay } from \"@chakra-ui/react\";\nimport { ArrowDownIcon, ArrowUpIcon, TimeIcon } from \"@chakra-ui/icons\";\nimport { useQuiz } from \"../../../providers/QuizProvider\";\nimport axios from \"axios\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport quizApi from \"../../../api/quizApi\";\nimport CustomAlertDialog from \"../../../components/CustomAlertDialog\";\nimport { useAuth } from \"../../../hooks/useAuth\";\nimport QuizService from \"../../../service/QuizService\";\nimport SubmitReportEntry from \"./SubmitReportEntry\";\nimport format from 'dateformat';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StartQuiz = () => {\n  _s();\n\n  var _report$quizScore;\n\n  const {\n    foundedQuiz,\n    setFoundedQuiz\n  } = useQuiz();\n  const {\n    code\n  } = useParams();\n  const [isLoading, setLoading] = useState(true);\n  const [isOpen, setOpen] = useState(false);\n  const [report, setReport] = useState(null);\n  const cancelRef = useRef();\n  const {\n    user\n  } = useAuth();\n  const [submitContent, setSubmitContent] = useState({\n    answers: []\n  });\n  const history = useHistory();\n  useEffect(async () => {\n    setLoading(true);\n\n    try {\n      if (!foundedQuiz) {\n        const quizInfo = await getQuizInfo(); //check private quiz\n\n        setFoundedQuiz(quizInfo);\n        setSubmitContent(prev => ({ ...prev,\n          quizId: quizInfo.id,\n          startTime: new Date()\n        }));\n        countDownTime(quizInfo.limitTime);\n        console.log(quizInfo);\n      } else {\n        setSubmitContent(prev => ({ ...prev,\n          quizId: foundedQuiz.id,\n          startTime: new Date()\n        }));\n        countDownTime(foundedQuiz.limitTime);\n      }\n\n      if (foundedQuiz && !foundedQuiz.questions || !foundedQuiz) {\n        const questions = await getQuizQuestions();\n        setFoundedQuiz(prev => ({ ...prev,\n          questions: questions\n        }));\n      }\n    } catch (e) {\n      history.push('/');\n    } finally {\n      setLoading(false);\n    }\n\n    setLoading(false);\n  }, []);\n\n  const getQuizInfo = async () => {\n    console.log(\"get quiz info\");\n    const data = await QuizService.getQuizByCode(code);\n    return data.data;\n  };\n\n  const getQuizQuestions = async () => {\n    console.log('get quiz\\'s questions');\n    const questions = await QuizService.getQuizQuestions(code);\n    return questions.data;\n  };\n\n  const onCheckOption = (e, question, option) => {\n    if (e.target.checked) {\n      if (submitContent.answers.filter(item => item.questionId === question.questionId).length > 0) {\n        setSubmitContent(prev => ({ ...prev,\n          answers: prev.answers.map(item => item.questionId !== question.questionId ? item : { ...item,\n            options: [...new Set([...item.options, option.optionId])]\n          })\n        }));\n      } //\n      else {\n        setSubmitContent(prev => ({ ...prev,\n          answers: [...prev.answers, {\n            questionId: question.questionId,\n            options: [option.optionId]\n          }]\n        }));\n      }\n    } else {\n      setSubmitContent(prev => {\n        return { ...prev,\n          answers: prev.answers.map(item => {\n            if (item.questionId !== question.questionId) {\n              return item;\n            } else {\n              return { ...item,\n                options: [...new Set(item.options.filter(optionId => optionId !== option.optionId))]\n              };\n            }\n          })\n        };\n      });\n    }\n  };\n\n  const submitAnswers = async () => {\n    const data = await QuizService.submissionAnswers(JSON.stringify(submitContent));\n    setReport(data.data);\n    console.log(data);\n  };\n\n  const [timer, setTimer] = useState('');\n\n  const countDownTime = async duration => {\n    duration = duration * 60;\n    let timer = duration,\n        minutes,\n        seconds;\n    let i = setInterval(function () {\n      minutes = parseInt(timer / 60);\n      seconds = parseInt(timer % 60);\n      minutes = minutes <= 0 ? \"0\" + minutes : minutes;\n      seconds = seconds <= 0 ? \"0\" + seconds : seconds;\n      setTimer(minutes + \":\" + seconds);\n      setSubmitContent(prev => ({ ...prev,\n        finishTime: new Date()\n      }));\n\n      if (--timer <= 0) {\n        setOpen(true);\n        clearInterval(i);\n      }\n    }, 1000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    direction: 'column',\n    bg: 'blue.100',\n    children: [/*#__PURE__*/_jsxDEV(CustomAlertDialog, {\n      title: 'Submit answers',\n      description: 'Are you sure? You can\\'t undo this action afterwards.',\n      isOpen: isOpen,\n      setOpen: setOpen,\n      cancelRef: cancelRef,\n      onSubmit: () => submitAnswers()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this), report && /*#__PURE__*/_jsxDEV(Box, {\n      bg: '',\n      mx: '5',\n      mt: '5',\n      p: 5,\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        children: \"Submit Report\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SimpleGrid, {\n        spacing: 5,\n        columns: '4',\n        py: 5,\n        children: [/*#__PURE__*/_jsxDEV(SubmitReportEntry, {\n          title: 'score',\n          content: `${report.score}/${(_report$quizScore = report.quizScore) !== null && _report$quizScore !== void 0 ? _report$quizScore : 0}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SubmitReportEntry, {\n          title: 'questions',\n          content: `${report.submitQuestionsCount}/${report.numOfQuestions}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SubmitReportEntry, {\n          title: 'startTime',\n          content: `${format(report.startTime, \"dd-mm hh:MM\")}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SubmitReportEntry, {\n          title: 'finishTime',\n          content: `${format(report.finishTime, \"dd-mm hh:MM\")}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SubmitReportEntry, {\n          title: 'attempt',\n          content: `${report.attempt}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      minH: '100vh',\n      bg: 'blue.100',\n      p: 10,\n      align: 'center',\n      children: !isLoading && /*#__PURE__*/_jsxDEV(Box, {\n        bg: 'white',\n        borderRadius: 'md',\n        boxShadow: 'xl',\n        minH: '100vh',\n        maxW: '860px',\n        p: 10,\n        children: [/*#__PURE__*/_jsxDEV(VStack, {\n          position: 'relative',\n          children: [/*#__PURE__*/_jsxDEV(Heading, {\n            pb: 10,\n            color: 'purple.600',\n            fontSize: 30,\n            children: foundedQuiz != null ? foundedQuiz.title : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            fontWeight: 'medium',\n            color: 'teal',\n            letterSpacing: 1,\n            fontStyle: 'italic',\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            m: 5,\n            children: [foundedQuiz && foundedQuiz.questions && foundedQuiz.questions.length, \" Questions\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 29\n          }, this), foundedQuiz && foundedQuiz.questions && foundedQuiz.questions.map((question, i) => /*#__PURE__*/_jsxDEV(VStack, {\n            w: '100%',\n            align: 'start',\n            textAlign: 'start',\n            p: 2,\n            spacing: 5,\n            children: [/*#__PURE__*/_jsxDEV(Container, {\n              w: '100%',\n              maxW: \"4xl\",\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                maxW: \"4xl\",\n                children: /*#__PURE__*/_jsxDEV(Text, {\n                  fontWeight: 'medium',\n                  fontSize: 20,\n                  color: 'purple.900',\n                  children: [i + 1, \". \", question.title]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 247,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(SimpleGrid, {\n              w: '100%',\n              columns: 2,\n              spacing: 4,\n              align: 'start',\n              textAlign: 'start',\n              children: question.options.map((option, i) => {\n                let filterElement = submitContent.answers.filter(v => v['questionId'] === question.questionId)[0];\n                return /*#__PURE__*/_jsxDEV(Container, {\n                  w: '100%',\n                  minW: 300,\n                  // maxW=\"xl\"\n                  align: 'start',\n                  textAlign: 'start',\n                  alignItems: 'start',\n                  children: /*#__PURE__*/_jsxDEV(Box, {\n                    padding: 1 // maxW=\"3xl\"\n                    ,\n                    children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      isDisabled: report !== null,\n                      defaultChecked: filterElement && filterElement.options.filter(o => o === option.optionId)[0],\n                      onChange: e => onCheckOption(e, question, option),\n                      value: option.optionId,\n                      colorScheme: 'teal',\n                      size: 'lg',\n                      children: option.content\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 276,\n                      columnNumber: 65\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 272,\n                    columnNumber: 61\n                  }, this)\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 263,\n                  columnNumber: 57\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 41\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 37\n          }, this)), /*#__PURE__*/_jsxDEV(Box, {\n            py: 5,\n            align: 'end',\n            alignSelf: 'end',\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              isDisabled: report !== null,\n              onClick: () => {\n                setOpen(true);\n                setSubmitContent(prevState => ({ ...prevState,\n                  finishTime: new Date()\n                }));\n              },\n              alignSelf: 'end',\n              size: 'lg',\n              colorScheme: 'teal',\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(HStack, {\n          zIndex: 100,\n          position: 'fixed',\n          bottom: 10,\n          right: 20,\n          children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n            label: \"Scroll to top\",\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: () => window.scrollTo(0, 0),\n              colorScheme: 'teal',\n              icon: /*#__PURE__*/_jsxDEV(ArrowUpIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 319,\n                columnNumber: 43\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            label: \"Scroll to bottom\",\n            children: /*#__PURE__*/_jsxDEV(IconButton // aria-label={\"\"}\n            , {\n              onClick: () => {// pageRef.current.scrollIntoView({\n                //     behavior: \"smooth\",\n                //     block: \"end\",\n                //     inline: \"nearest\"\n                // })\n              },\n              colorScheme: 'teal',\n              icon: /*#__PURE__*/_jsxDEV(ArrowDownIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 332,\n                columnNumber: 43\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 25\n        }, this), report === null && /*#__PURE__*/_jsxDEV(Flex, {\n          p: 1,\n          position: 'fixed',\n          left: 0,\n          top: 0,\n          m: 10,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            isDisabled: report !== null,\n            size: 'md',\n            colorScheme: 'teal',\n            variant: 'outline',\n            leftIcon: /*#__PURE__*/_jsxDEV(TimeIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 43\n            }, this),\n            children: [timer || 'No Time Limit', ' ', \"left\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 45\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 35\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 9\n  }, this);\n};\n\n_s(StartQuiz, \"8oQhKfcr1Y2M06kqu3chRuuHgWY=\", false, function () {\n  return [useQuiz, useParams, useAuth, useHistory];\n});\n\n_c = StartQuiz;\nexport default StartQuiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"StartQuiz\");","map":{"version":3,"sources":["C:/Users/Admin/Documents/quiz maker client/src/pages/public/start_quiz/StartQuiz.js"],"names":["React","useEffect","useRef","useState","Box","Button","Checkbox","Container","Divider","Flex","Heading","HStack","IconButton","SimpleGrid","Text","Tooltip","VStack","AlertDialog","AlertDialogBody","AlertDialogFooter","AlertDialogHeader","AlertDialogContent","AlertDialogOverlay","ArrowDownIcon","ArrowUpIcon","TimeIcon","useQuiz","axios","useHistory","useParams","quizApi","CustomAlertDialog","useAuth","QuizService","SubmitReportEntry","format","StartQuiz","foundedQuiz","setFoundedQuiz","code","isLoading","setLoading","isOpen","setOpen","report","setReport","cancelRef","user","submitContent","setSubmitContent","answers","history","quizInfo","getQuizInfo","prev","quizId","id","startTime","Date","countDownTime","limitTime","console","log","questions","getQuizQuestions","e","push","data","getQuizByCode","onCheckOption","question","option","target","checked","filter","item","questionId","length","map","options","Set","optionId","submitAnswers","submissionAnswers","JSON","stringify","timer","setTimer","duration","minutes","seconds","i","setInterval","parseInt","finishTime","clearInterval","score","quizScore","submitQuestionsCount","numOfQuestions","attempt","title","filterElement","v","o","content","prevState","window","scrollTo"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Checkbox,\r\n    Container,\r\n    Divider, Flex,\r\n    Heading,\r\n    HStack, IconButton,\r\n    SimpleGrid,\r\n    Text,\r\n    Tooltip,\r\n    VStack,\r\n    AlertDialog,\r\n    AlertDialogBody,\r\n    AlertDialogFooter,\r\n    AlertDialogHeader,\r\n    AlertDialogContent,\r\n    AlertDialogOverlay,\r\n} from \"@chakra-ui/react\";\r\nimport {ArrowDownIcon, ArrowUpIcon, TimeIcon} from \"@chakra-ui/icons\";\r\nimport {useQuiz} from \"../../../providers/QuizProvider\";\r\nimport axios from \"axios\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport quizApi from \"../../../api/quizApi\";\r\nimport CustomAlertDialog from \"../../../components/CustomAlertDialog\";\r\nimport {useAuth} from \"../../../hooks/useAuth\";\r\nimport QuizService from \"../../../service/QuizService\";\r\nimport SubmitReportEntry from \"./SubmitReportEntry\";\r\nimport format from 'dateformat';\r\n\r\nconst StartQuiz = () => {\r\n\r\n    const {foundedQuiz, setFoundedQuiz} = useQuiz();\r\n    const {code} = useParams();\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [isOpen, setOpen] = useState(false);\r\n    const [report, setReport] = useState(null);\r\n    const cancelRef = useRef();\r\n    const {user} = useAuth();\r\n    const [submitContent, setSubmitContent] = useState({answers: []});\r\n    const history = useHistory();\r\n\r\n    useEffect(async () => {\r\n            setLoading(true);\r\n            try {\r\n                if (!foundedQuiz) {\r\n                    const quizInfo = await getQuizInfo();\r\n                    //check private quiz\r\n                    setFoundedQuiz(quizInfo);\r\n                    setSubmitContent((prev) => ({\r\n                        ...prev, quizId: quizInfo.id,\r\n                        startTime: new Date()\r\n                    }))\r\n                    countDownTime(quizInfo.limitTime);\r\n                    console.log(quizInfo)\r\n\r\n                } else {\r\n                    setSubmitContent((prev) => ({\r\n                        ...prev, quizId: foundedQuiz.id, startTime: new Date()\r\n\r\n                    }))\r\n                    countDownTime(foundedQuiz.limitTime);\r\n\r\n                }\r\n                if ((foundedQuiz && !foundedQuiz.questions) || (!foundedQuiz)) {\r\n                    const questions = await getQuizQuestions();\r\n                    setFoundedQuiz(prev => ({\r\n                        ...prev,\r\n                        questions: questions\r\n                    }))\r\n                }\r\n\r\n            } catch (e) {\r\n                history.push('/')\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n\r\n\r\n            setLoading(false);\r\n        }\r\n        , []);\r\n\r\n\r\n    const getQuizInfo = async () => {\r\n        console.log(\"get quiz info\")\r\n        const data = await QuizService.getQuizByCode(code);\r\n        return data.data;\r\n    }\r\n    const getQuizQuestions = async () => {\r\n        console.log('get quiz\\'s questions')\r\n        const questions = await QuizService.getQuizQuestions(code);\r\n\r\n        return questions.data;\r\n    }\r\n\r\n    const onCheckOption = (e, question, option) => {\r\n        if (e.target.checked) {\r\n            if ((submitContent.answers.filter((item) => item.questionId === question.questionId)).length > 0) {\r\n                setSubmitContent((prev) => ({\r\n                    ...prev,\r\n                    answers: prev.answers.map((item) => item.questionId !== question.questionId ? item : {\r\n                        ...item,\r\n                        options: [\r\n                            ...new Set([...item.options,\r\n                                option.optionId])\r\n                        ]\r\n                    })\r\n                }))\r\n            }\r\n            //\r\n            else {\r\n                setSubmitContent((prev) => ({\r\n                    ...prev,\r\n                    answers: [...prev.answers, {\r\n                        questionId: question.questionId,\r\n                        options: [\r\n                            option.optionId\r\n                        ]\r\n                    }]\r\n                }))\r\n            }\r\n        } else {\r\n            setSubmitContent((prev) => {\r\n                return {\r\n                    ...prev,\r\n                    answers: prev.answers.map((item) => {\r\n                            if (item.questionId !== question.questionId) {\r\n                                return item;\r\n                            } else {\r\n                                return ({\r\n                                    ...item,\r\n                                    options: [\r\n                                        ...new Set(item.options.filter(optionId => optionId !== option.optionId))\r\n                                    ]\r\n                                })\r\n\r\n                            }\r\n\r\n\r\n                        }\r\n                    )\r\n                }\r\n            })\r\n        }\r\n    }\r\n    const submitAnswers = async () => {\r\n        const data = await QuizService.submissionAnswers(JSON.stringify(submitContent));\r\n        setReport(data.data);\r\n        console.log(data);\r\n    }\r\n    const [timer, setTimer] = useState('');\r\n    const countDownTime = async (duration) => {\r\n        duration = duration * 60;\r\n        let timer = duration, minutes, seconds;\r\n        let i = setInterval(function () {\r\n            minutes = parseInt(timer / 60);\r\n            seconds = parseInt(timer % 60);\r\n\r\n            minutes = minutes <= 0 ? \"0\" + minutes : minutes;\r\n            seconds = seconds <= 0 ? \"0\" + seconds : seconds;\r\n            setTimer(minutes + \":\" + seconds);\r\n\r\n            setSubmitContent(prev => ({\r\n                ...prev,\r\n                finishTime: new Date()\r\n            }))\r\n            if (--timer <= 0) {\r\n                setOpen(true);\r\n                clearInterval(i);\r\n            }\r\n        }, 1000);\r\n\r\n    }\r\n\r\n    return (\r\n        <Flex direction={'column'} bg={'blue.100'}>\r\n            <CustomAlertDialog\r\n                title={'Submit answers'}\r\n                description={'Are you sure? You can\\'t undo this action afterwards.'}\r\n                isOpen={isOpen}\r\n                setOpen={setOpen}\r\n                cancelRef={cancelRef}\r\n                onSubmit={() => submitAnswers()}\r\n            />\r\n            {/*QUIZ SUBMIT ANSWERS REPORT*/}\r\n            {report && <Box bg={''} mx={'5'} mt={'5'} p={5}>\r\n                <Heading>Submit Report</Heading>\r\n                <SimpleGrid spacing={5} columns={'4'} py={5}>\r\n                    <SubmitReportEntry title={'score'} content={`${report.score}/${report.quizScore ?? 0}`}/>\r\n                    <SubmitReportEntry title={'questions'}\r\n                                       content={`${report.submitQuestionsCount}/${report.numOfQuestions}`}/>\r\n                    <SubmitReportEntry title={'startTime'} content={`${format(report.startTime, \"dd-mm hh:MM\")}`}/>\r\n                    <SubmitReportEntry title={'finishTime'} content={`${format(report.finishTime, \"dd-mm hh:MM\")}`}/>\r\n                    <SubmitReportEntry title={'attempt'} content={`${report.attempt}`}/>\r\n                </SimpleGrid>\r\n            </Box>}\r\n\r\n            <Box minH={'100vh'} bg={'blue.100'} p={10}\r\n                 align={'center'}>\r\n                {\r\n                    !isLoading && <Box\r\n                        bg={'white'}\r\n                        borderRadius={'md'}\r\n                        boxShadow={'xl'}\r\n                        minH={'100vh'}\r\n                        maxW={'860px'}\r\n                        p={10}>\r\n                        <VStack position={'relative'}>\r\n\r\n                            {/*\r\n                           QUIZ TITLE\r\n                           */}\r\n                            <Heading\r\n                                pb={10}\r\n                                color={'purple.600'}\r\n                                fontSize={30}>\r\n                                {foundedQuiz != null ? foundedQuiz.title : ''}\r\n                            </Heading>\r\n                            {/*NUMBER OF QUESTIONS*/}\r\n                            <Text\r\n                                fontWeight={'medium'}\r\n                                color={'teal'}\r\n                                letterSpacing={1}\r\n                                fontStyle={'italic'}\r\n                                position={'absolute'}\r\n                                top={0}\r\n                                right={0}\r\n                                m={5}>\r\n                                {foundedQuiz && foundedQuiz.questions && foundedQuiz.questions.length} Questions\r\n                            </Text>\r\n                            {/*QUESTIONS*/}\r\n                            {\r\n                                foundedQuiz && foundedQuiz.questions && foundedQuiz.questions.map((question, i) => (\r\n                                    <VStack\r\n                                        w={'100%'}\r\n                                        align={'start'}\r\n                                        textAlign={'start'} key={i}\r\n                                        p={2}\r\n                                        spacing={5}>\r\n                                        {/*\r\n                                    QUESTION TITLE\r\n                                    */}\r\n                                        <Container w={'100%'} maxW=\"4xl\">\r\n                                            <Box maxW=\"4xl\">\r\n                                                <Text fontWeight={'medium'} fontSize={20} color={'purple.900'}>\r\n                                                    {i + 1}. {question.title}\r\n                                                </Text>\r\n                                            </Box>\r\n                                        </Container>\r\n                                        {/*OPTIONS*/}\r\n                                        <SimpleGrid\r\n                                            w={'100%'}\r\n                                            columns={2}\r\n                                            spacing={4}\r\n                                            align={'start'}\r\n                                            textAlign={'start'}>\r\n                                            {\r\n                                                question.options.map((option, i) => {\r\n                                                    let filterElement = submitContent.answers.filter(v => v['questionId'] === question.questionId)[0];\r\n                                                    return (\r\n                                                        <Container\r\n                                                            w={'100%'}\r\n                                                            minW={300}\r\n                                                            key={i}\r\n                                                            // maxW=\"xl\"\r\n                                                            align={'start'}\r\n                                                            textAlign={'start'}\r\n                                                            alignItems={'start'}\r\n                                                        >\r\n                                                            <Box\r\n                                                                padding={1}\r\n                                                                // maxW=\"3xl\"\r\n                                                            >\r\n                                                                <Checkbox\r\n                                                                    isDisabled={report !== null}\r\n                                                                    defaultChecked={\r\n                                                                        filterElement &&\r\n                                                                        filterElement.options.filter(o => o === option.optionId)[0]\r\n                                                                    }\r\n                                                                    onChange={(e) => onCheckOption(e, question, option)}\r\n                                                                    value={option.optionId}\r\n                                                                    colorScheme={'teal'}\r\n                                                                    size={'lg'}>\r\n                                                                    {option.content}\r\n                                                                </Checkbox>\r\n                                                            </Box>\r\n                                                        </Container>\r\n                                                    );\r\n                                                })\r\n                                            }\r\n                                        </SimpleGrid>\r\n                                        <Divider/>\r\n                                    </VStack>\r\n                                ))\r\n                            }\r\n                            {/* Submit button*/}\r\n                            <Box py={5} align={'end'} alignSelf={'end'}>\r\n                                <Button\r\n                                    isDisabled={report !== null}\r\n                                    onClick={() => {\r\n                                        setOpen(true)\r\n                                        setSubmitContent((prevState => ({\r\n                                            ...prevState,\r\n                                            finishTime: new Date(),\r\n                                        })))\r\n                                    }}\r\n                                    alignSelf={'end'} size={'lg'} colorScheme={'teal'}>Submit</Button>\r\n                            </Box>\r\n                        </VStack>\r\n\r\n                        {/* FIXED CONTENTS*/}\r\n                        <HStack zIndex={100} position={'fixed'} bottom={10} right={20}>\r\n                            <Tooltip label={\"Scroll to top\"}>\r\n                                <IconButton\r\n                                    onClick={() => window.scrollTo(0, 0)}\r\n                                    colorScheme={'teal'}\r\n                                    icon={<ArrowUpIcon/>}/>\r\n                            </Tooltip>\r\n                            <Tooltip label={\"Scroll to bottom\"}>\r\n                                <IconButton\r\n                                    // aria-label={\"\"}\r\n                                    onClick={() => {\r\n                                        // pageRef.current.scrollIntoView({\r\n                                        //     behavior: \"smooth\",\r\n                                        //     block: \"end\",\r\n                                        //     inline: \"nearest\"\r\n                                        // })\r\n                                    }}\r\n                                    colorScheme={'teal'}\r\n                                    icon={<ArrowDownIcon/>}/>\r\n                            </Tooltip>\r\n                        </HStack>\r\n                        {report === null && <Flex p={1} position={'fixed'} left={0} top={0} m={10}>\r\n                            <Button\r\n                                isDisabled={report !== null}\r\n                                size={'md'} colorScheme={'teal'} variant={'outline'}\r\n                                leftIcon={<TimeIcon/>}>{timer || 'No Time Limit'}{' '}\r\n                                left</Button>\r\n                        </Flex>}\r\n                    </Box>\r\n\r\n\r\n                }\r\n            </Box>\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default StartQuiz;"]},"metadata":{},"sourceType":"module"}